#+STARTUP: showall
#+PROPERTY: header-args:sh :prologue exec 2>&1 :epilogue echo :

* hledger: Make It So

Inspired by the structure and ideas of [[https://github.com/adept/full-fledged-hledger/wiki][adept's Full-fledged Hledger]].

I've given [[https://pauley.org.za/functional-finance-hledger/][a talk]] at [[https://www.meetup.com/lambda-luminaries/events/qklkvpyxmbnb/][Lambda Luminaries Johannesburg]] featuring hledger-makeitso.

** Who should use this project?

   At the moment this software is in an alpha stage.
   I'm still making and changing decisions as I go along.

   If you're familiar with [[http://hledger.org/][hledger]] and are willing to tolerate some annoying breaking changes that would e.g. require you to
   frequently change the names of your input and/or output files, then please try it out and let me know what you think.

** Build Instructions

You need a recent version of [[https://docs.haskellstack.org/en/stable/README/][stack]] installed.

Then run:
#+NAME: stack-build
#+BEGIN_SRC sh :results none :exports both
stack build
stack install
#+END_SRC

Which should end with this:
#+BEGIN_SRC org
Copied executables to ~/.local/bin:
- hledger-makeitso
#+END_SRC

Ensure that =${HOME}/.local/bin= is in your =PATH=.

Usually this means adding this to your =~/.bashrc=:
#+BEGIN_SRC sh :results none :exports both
PATH="${HOME}/.local/bin:${PATH}"
#+END_SRC

** How to Use It

Have a look at the [[file:docs/README.org][detailed step-by-step instructions]] and the files in the [[file:docs/][documentation directory]].

For a visual overview, check out the slide show version of the same step-by-step instructions:

https://pauley.org.za/hledger-makeitso/

*** Getting Started

    We mostly use conventions based on a predefined directory structure for your statements.
    For example, assuming you have a =savings= account at =mybank=, you'll put your first CSV statement here:
    =import/mybank/savings/1-in/2018/123456789_2018-06-30.csv=.

    Then you'll add an hledger rules file to the account directory:
    =import/mybank/savings/mybank-savings.rules=

    You'll also want to specify your account's opening balance at the time of the first transaction you have added above.
    Add a journal entry to =import/mybank/savings/opening.journal=, something like this:

    #+BEGIN_SRC hledger
    2018-06-01 Savings Account Opening Balance
    assets:Current:MyBank:Savings               $102.01
    equity:Opening Balances:MyBank:Savings
    #+END_SRC

    Add all your files to your favourite version control system.

    Then run =hledger-makeitso import= and it will generate some hledger journals for you.

    In a typical software project we don't add generated files to version control, but in this case I think it is a good idea
    to add all the generated files to version control as well - when you inevitably change something, e.g. how you classify transactions
    in your rules file, then you can easily see if your change had the desired effect by looking at a diff.
*** The =preprocess= Script

    Sometimes the statements you get from your bank is [[https://github.com/apauley/fnb-csv-demoronizer][less than suitable]] for automatic processing.
    Or maybe you just want to make it easier for the hledger rules file to do its thing by adding some useful columns.

    If you put a script called =preprocess= in the account directory, e.g. =import/mybank/savings/preprocess=,
    then =hledger-makeitso= will call that script for each input statement.

    The =preprocess= script will be called with 4 positional parameters:
     1. The path to the input statement, e.g. =import/mybank/savings/1-in/2018/123456789_2018-06-30.csv=
     2. The path to an output file that can be sent to =hledger=, e.g. =import/mybank/savings/2-preprocessed/2018/123456789_2018-06-30.csv=
     3. The name of the bank, e.g. =mybank=
     4. The name of the account, e.g. =savings=

    Your =preprocess= script is expected to:
     - read the input file
     - write a new output file at the supplied path that works with your rules file
     - be idempotent. Running =preprocess= multiple times on the same files will produce the same result.

*** The Rules File
    - We'll first look for a rules file per bank in =import/mybank/mybank.rules=. This can be used for all =mybank= accounts.
    - If a rules file specific to the account exists, it will be used instead for all statements of that account.
      The file has to be in the account's directory and named after the account, e.g. =import/mybank/savings/mybank-savings.rules=.
    - You can further use a more specific rules file that is used only for some statements.
      If you add a prefix, separated by an underscore (=_=), to your input file name, and also have a rules file with that prefix
      as its name, then we'll use that rules file instead.
      For example: assuming you've downloaded a specific statement from Mint as opposed to your bank, and named it =mint_99966633_20171223_1844.csv=.
      We will look for the rules file in the following places:
      - First, in the account directory, e.g. =import/mybank/savings/mint.rules=
      - Then, in the bank's directory, e.g. =import/mybank/mint.rules=
      - Lastly in the import directory, e.g. =import/mint.rules=

*** The =import= script

    If you need even more power and flexibility than what you can get from the =preprocess= script and =hledger='s CSV import functionality,
    then your own custom =import= script will give you the power.

    At the expense of more work for you, of course.

    As an example, =hledger='s CSV import currently [[https://github.com/simonmichael/hledger/issues/627][only supports two postings per transaction]], even though =hledger= itself
    is perfectly happy with transactions containing more than two postings, e.g.:

    #+BEGIN_SRC hledger
    2019-02-01 Mortgage Payment
    Liabilities:Mortgage                                1,000.00
    Expenses:Interest:Real Estate                         833.33
    Assets:Cash                                         -1833.33
    #+END_SRC

    The =import= script can be used in addition to the =preprocess= script, or on it's own.
    But since the =import= script is more powerful than the =preprocess= script, you could tell your =import= script to do
    anything that the =preprocess= script would have done.

    Save your =import= script in the account directory, e.g. =import/mybank/savings/import=.

    =hledger-makeitso= will call your =import= script with 4 positional parameters:
     1. The path to the input statement, e.g. =import/mybank/savings/1-in/2018/123456789_2018-06-30.csv=
     2. A "-" (indicating that output should be sent to =stdout=)
     3. The name of the bank, e.g. =mybank=
     4. The name of the account, e.g. =savings=

    Your =import= script is expected to:
     - read the input file
     - generate your own =hledger= journal transactions
     - be idempotent. Running =import= multiple times on the same files should produce the same result.
     - send all output to =stdout=. =hledger-makeitso= will pipe your output into =hledger= which will format it and save it to an output file.

** Goals

   Adept's goals resonated with me:

   - Tracking expenses should take as little time, effort and manual work as possible
   - Eventual consistency should be achievable: even if I can't record something precisely right now,
     maybe I would be able to do it later, so I should be able to leave things half-done and pick them up later
   - Ability to refactor is a must. I want to be able to go back and change the way I am doing things,
     with as little effort as possible and without fear of irrevocably breaking things.

** Why?

   Why am I writing this tool, instead of just using [[https://github.com/adept/full-fledged-hledger/wiki][adept's Full-fledged Hledger]] unchanged?

   It kind of grew little by little as I was modifying the system to fit my needs.
   Some points of interest:

   1. I wanted a command-line tool where all the dependencies was resolved at compile time,
      so that a binary can be distributed instead of a collection of scripts with the build dependencies on every user's computer.
   2. Early on while trying out the system I introduced a directory for each account,
      because some of my account statements had vastly different CSV formats, even within the same bank.
      A separate directory seemed like a good place to house each account's intricacies, although I guess
      there are other ways to do it.
   3. I had to [[https://github.com/adept/full-fledged-hledger/blob/d4d6b5b43139b70561e8173cabdb0eb0dc268daa/src/export/export.hs#L12][modify the export script]] to indicate which years I had data for. And I wondered if that sort of data could be
      determined from some more directory structure conventions. So I added a another level indicating the year of the statement.
      I'm still wondering if it would be possible to just detect the years from the actual transactions, but for now I have a directory
      for each year.
