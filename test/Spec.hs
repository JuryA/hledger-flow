{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedLists #-}

module Main where

import Test.HUnit
import Turtle
import Prelude hiding (FilePath)
import qualified Data.Map.Strict as Map
import qualified Control.Foldl as Fold
import qualified Data.Text as T

import Common

files = ["./dir1/d1f1.journal", "./dir1/d1f2.journal", "./dir2/d2f1.journal", "./dir2/d2f2.journal"] :: [FilePath]

groupedIncludeFiles :: Map.Map FilePath [FilePath]
groupedIncludeFiles = [("./dir1.journal", ["./dir1/d1f1.journal", "./dir1/d1f2.journal"]),
                       ("./dir2.journal", ["./dir2/d2f1.journal", "./dir2/d2f2.journal"])]

test1 = TestCase (assertEqual "takeLast" [3,5,7] (takeLast 3 [1,3,5,7]))

testGroupBy = TestCase (do
                           let grouped = groupValuesBy aggregateFilePath files :: Map.Map FilePath [FilePath]
                           assertEqual "Group Files by Dir" groupedIncludeFiles grouped)

testGroupPairs = TestCase (do
                              let actual = groupPairs . pairBy aggregateFilePath $ files
                              assertEqual "Group files, paired by the directories they live in" groupedIncludeFiles actual)

testToIncludeLine = TestCase (do
                                 let expected = "!include file1.journal"
                                 let actual = toIncludeLine "./base/dir/" "./base/dir/file1.journal"
                                 assertEqual "Include line" expected actual)
testToIncludeFiles = TestCase (
  do
    let expected = [("./dir1.journal",
                     "### Generated by hledger-makeitso - DO NOT EDIT ###\n\n" <>
                      "!include dir1/d1f1.journal\n" <>
                      "!include dir1/d1f2.journal\n"),
                    ("./dir2.journal",
                     "### Generated by hledger-makeitso - DO NOT EDIT ###\n\n" <>
                      "!include dir2/d2f1.journal\n" <>
                      "!include dir2/d2f2.journal\n")]
    let txt = toIncludeFiles groupedIncludeFiles :: Map.Map FilePath Text
    assertEqual "Convert a grouped map of paths, to a map with text contents for each file" expected txt)

tests = TestList [test1, testGroupBy, testGroupPairs, testToIncludeLine, testToIncludeFiles]

main :: IO Counts
main = do
  counts <- runTestTT tests
  if (errors counts > 0 || failures counts > 0)
    then exit $ ExitFailure 1
    else return counts
