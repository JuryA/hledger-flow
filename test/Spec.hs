{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedLists #-}

module Main where

import Test.HUnit
import Turtle
import Prelude hiding (FilePath)
import qualified Data.Map.Strict as Map
import qualified Control.Foldl as Fold
import qualified Data.Text as T
import qualified Integration

import TestHelpers
import Common

groupedIncludeFiles :: Map.Map FilePath [FilePath]
groupedIncludeFiles = [("./import/john/bogartbank/checking/3-journal/2018-include.journal",
                        ["import/john/bogartbank/checking/3-journal/2018/2018-04-30.journal",
                         "import/john/bogartbank/checking/3-journal/2018/2018-03-30.journal",
                         "import/john/bogartbank/checking/3-journal/2018/2018-05-30.journal"]),
                       ("./import/john/bogartbank/savings/3-journal/2018-include.journal",
                        ["import/john/bogartbank/savings/3-journal/2018/d2f1.journal",
                         "import/john/bogartbank/savings/3-journal/2018/d2f2.journal"])]

testGroupBy = TestCase (do
                           let grouped = groupIncludeFiles journalFiles :: Map.Map FilePath [FilePath]
                           assertEqual "Group Files by Dir" groupedIncludeFiles grouped)

testGroupPairs = TestCase (do
                              let actual = groupPairs . pairBy includeFilePath $ journalFiles
                              assertEqual "Group files, paired by the directories they live in" groupedIncludeFiles actual)

testToIncludeLine = TestCase (do
                                 let expected = "!include file1.journal"
                                 let actual = toIncludeLine "./base/dir/" "./base/dir/file1.journal"
                                 assertEqual "Include line" expected actual)
testToIncludeFiles = TestCase (
  do
    let expected = [("./import/john/bogartbank/checking/3-journal/2018-include.journal",
                     "### Generated by hledger-makeitso - DO NOT EDIT ###\n\n" <>
                      "!include import/john/bogartbank/checking/3-journal/2018/2018-03-30.journal\n" <>
                      "!include import/john/bogartbank/checking/3-journal/2018/2018-04-30.journal\n" <>
                      "!include import/john/bogartbank/checking/3-journal/2018/2018-05-30.journal\n"),
                    ("./import/john/bogartbank/savings/3-journal/2018-include.journal",
                     "### Generated by hledger-makeitso - DO NOT EDIT ###\n\n" <>
                      "!include import/john/bogartbank/savings/3-journal/2018/d2f1.journal\n" <>
                      "!include import/john/bogartbank/savings/3-journal/2018/d2f2.journal\n")] :: Map.Map FilePath Text
    txt <- single $ toIncludeFiles groupedIncludeFiles
    assertEqual "Convert a grouped map of paths, to a map with text contents for each file" expected txt)

unitTests = TestList [testGroupBy, testGroupPairs, testToIncludeLine, testToIncludeFiles]

tests = TestList [unitTests, Integration.tests]

main :: IO Counts
main = do
  counts <- runTestTT tests
  if (errors counts > 0 || failures counts > 0)
    then exit $ ExitFailure 1
    else return counts
